name: Compilation

on:
  push:
    branches: ["dev", "devops"]
  pull_request:
    branches: ["main", "dev"]

jobs:
  build_rtype:
    runs-on: ${{ matrix.os }}

    strategy:
      #TODO Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      # - name: Download GEngine artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: gengine-build-${{ matrix.os }}-${{ matrix.cpp_compiler }}
      #     path: ${{ github.workspace }}/build

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/r-type/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}/r-type

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

  cleanup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check for build artifacts
        run: |
          artifacts=$(find ${{ github.workspace }} -type f -name "*.so" -o -name "*.o" -o -name "*.d" -o -name "*.a")
          if [ -n "$artifacts" ]; then
            echo "Found unwanted artifacts:"
            echo "$artifacts"
            exit 1
          else
            echo "No unwanted artifacts found."
          fi

  beautify:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install clang-format
        run: sudo apt-get install clang-format

      - name: Check clang-format compliance
        run: |
          files=$(find ${{ github.workspace }} -name "*.hpp" -o -name "*.cpp" -o -name "*.inl")
          clang-format -Werror -dry-run $files
